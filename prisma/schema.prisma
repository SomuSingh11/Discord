generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

model Profile {
  id String @id @default(uuid())
  userId String @unique
  name String 
  imageUrl String @db.Text 
  email String @db.Text 

  servers Server[] // One-to-many relation: A profile can own multiple servers.
  members Member[] // One-to-many relation: A profile can be a member of multiple servers.
  channels Channel[] // One-to-many relation: A profile can create multiple channels.

  createAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server {
  id String @id @default(uuid())
  name String
  imageUrl String @db.Text
  inviteCode String @unique

  profileId String // Foreign key for the owner (profile) of the server.
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade) // Relation to the profile that owns the server.

  members Member[] // One-to-many relation: A server can have multiple members.
  channels Channel[] // One-to-many relation: A server can have multiple channels.

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId]) // Index on `profileId` to speed up queries filtering by profile.
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id String @id @default(uuid())
  role MemberRole @default(GUEST)

  profileId String  // Foreign key for the profile of the member.
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade) // Relation to the profile.
    
  serverId String // Foreign key for the server where the member belongs.
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade) // Relation to the server.

  messages Message[] // One-to-many relation: A member can send multiple messages
  directMessages DirectMessage[]  // One-to-many relation: A member can send multiple direct messages.

  conversationsInitiated Conversation[] @relation("MemberOne") // Conversations initiated by this member.
  conversationsReceived Conversation[] @relation("MemberTwo") // Conversations received by this member.
 

  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

enum ChannelType {
  TEXT 
  AUDIO 
  VIDEO
}

model Channel {
  id String @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

  profileId String // Foreign key for the profile that created the channel.
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String // Foreign key for the server where the channel exists.
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[] // One-to-many relation: A channel can contain multiple messages.

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([serverId])
  @@index([profileId])
}


// Explanation: Represents a message in a channel, containing text, optional file URL, sender (Member), and channel (Channel) relations.
model Message {
  id String @id @default(uuid())
  content String @db.Text

  fileUrl String? @db.Text

  memberId String // Foreign key for the member who sent the message.
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String // Foreign key for the channel where the message was sent.
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false) // Indicates if the message is deleted.

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([memberId])
}


// Explanation: Represents a private conversation between two Members. It enforces unique conversations and contains direct messages.
model Conversation {
  id String @id @default(uuid())

  memberOneId String // Foreign key for the initiating member.
  memberOne Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId String // Foreign key for the receiving member.
  memberTwo Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[] // One-to-many relation: A conversation contains multiple direct messages.

  @@index([memberOneId])
  @@index([memberTwoId])

  @@unique([memberOneId, memberTwoId]) // Ensures unique conversation between two members.
}


// Explanation: Similar to Message, this model represents direct messages between members within a private Conversation.
model DirectMessage {
  id String @id @default(uuid())
  content String @db.Text
  fileUrl String? @db.Text

  memberId String // Foreign key for the member who sent the direct message.
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  conversationId String // Foreign key for the conversation.
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)  // Indicates if the direct message is deleted.

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([conversationId])
}
